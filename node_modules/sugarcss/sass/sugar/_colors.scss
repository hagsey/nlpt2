//
// Colors management
//

//
// Color function
//
@function s-color(
	$name,
	$actions : null
) {
	// grab the colors
	$colors : sugar('settings.colors');
	$color : map-get($colors, $name);
	$modifiers : null;

	// check that we have the color
	@if $color == null {
		@if s-is($name, color) {
			$color : $name;
		} @else {
			@error('The color "#{$name}" does not exist...');
		}
	}

	// check if is a map
	@if type-of($color) == map {
		$modifiers : map-get($color, modifiers);
		$color : map-get($color, color);
	}
	
	// check if action is a string to check if is a modifier
	@if type-of($actions) == string and $modifiers and map-get($modifiers, $actions) {
		$mod : map-get($modifiers, $actions);
		@if type-of($mod) == color {
			$color : $mod;
			$actions : null;
		} @else {
			$actions : $mod;
		}
	}

	// check action to do
	@if $actions {
		// parse action
		$actions-map : _sugar-parse-properties($actions, (
			hue : number,
			lighten : number,
			darken : number,
			grayscale : true,
			complement : true,
			invert : true,
			saturate : number,
			desaturate : number,
			opacity : number,
			mix : color
		), (
			hue : h,
			lighten : li,
			darken : da,
			grayscale : gr,
			complement : comp,
			invert : i,
			saturate : sa,
			desaturate : desa,
			opacity : o,
			mix : m
		));
		// loop on each action to process to keep order
		@each $action, $value in $actions-map {
			// hue
			@if $action == hue and type-of($value) == number {
				$color : adjust-hue($color, $value);
			}
			// lighten
			@if $action == lighten and type-of($value) == number {
				$color : lighten($color, $value);
			}
			// darken
			@if $action == darken and type-of($value) == number {
				$color : darken($color, $value);
			}
			// saturate
			@if $action == saturate and type-of($value) == number {
				$color : saturate($color, $value);
			}
			// desaturate
			@if $action == desaturate and type-of($value) == number {
				$color : desaturate($color, $value);
			}
			// grayscale
			@if $action == grayscale and $value == true {
				$color : grayscale($color);
			}
			// complement
			@if $action == complement and $value == true {
				$color : complement($color);
			}
			// invert
			@if $action == invert and $value == true {
				$color : invert($color);
			}
			// opacity
			@if $action == opacity and type-of($value) == number {

				$transparentize : 1 - s-strip-units($value);
				@if unit($value) == '%' {
					$transparentize : (100 - s-strip-units($value)) / 100;
				}
				$color : transparentize($color, $transparentize);
			}
			// mix
			@if $action == mix and type-of($value) == color {
				$color : mix($color, $value);
			}
		}
	}
	// return the color
	@return $color;
}
@function s-c(
	$name,
	$actions : null
) {
	@return s-color($name, $actions);
}