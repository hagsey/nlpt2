//
// Some helpers mixins
//

//
// Side lined
//
@mixin s-side-lined(
	$props : ()
) {
	$props : _sugar-parse-properties($props, (
		style : none hidden dotted dashed solid double groove ridge inset outset initial inherit,
		side : left right both,
		height : number,
		width : number,
		color : color,
		padding : number,
		margin-top : number
	), (
		style : stl,
		side : si,
		padding : p,
		margin-top : mt
	));
	
	$s : _sugar-handle-nested(side-lined, $props);

	$side : map-get-or($props, side, both);
	$height : map-get-or($props, height, s-rem(1px));
	$width : map-get-or($props, width, 50%);
	$color : map-get-or($props, color, black);
	$style : map-get-or($props, style, solid);
	$margin-top : map-get($props, margin-top);
	$padding : map-get-or($props, padding, 0);

	display: block;
	overflow: hidden;
	min-height : 1.2em;

	@if $side == both {
		text-align: center;
	} @else if $side == left {
		text-align: right;
	} @else if $side == right {
		text-align: left;
	}
	
	$sel : '&:before, &:after';
	@if $side == left {
		$sel : '&:before';
	} @else if $side == right {
		$sel : '&:after';
	}

	#{$sel} {
		content: "";
		display: inline-block;
		vertical-align: middle;
		position: relative;
		width: $width;

		border-top-style: $style;
		border-top-width: $height;

		@if $color != inherit {
			border-top-color: $color;
    	}
		
		@if $style == double {
			height : $height * 2;
			border-bottom-style: solid;
			border-bottom-width: $height;
			border-bottom-color: $color;
		}

    	@if $margin-top {
			bottom: $margin-top;
    	} @else {
    		bottom : 0.05em;
    	}
	}

	@if $side == left or $side == both {
		&:before {
			right: $padding;
			margin-left: -50%;
		}
	}
	@if $side == right or $side == both {
		&:after {
			left: $padding;
			margin-right: -50%;
		}
	}

	@include _sugar-handle-nested(side-lined) {
		@content;
	}
}

//
// Position
//
@mixin s-position(
	$position
) {
	// get map
	$map : s-position($position, $_handle-nested : true);

	// get map
	@each $prop, $value in $map {
		#{$prop} : $value;
	}

	// handle nested
	@include _sugar-handle-nested(position) {
		@content;
	}
}
@function s-position(
	$position,
	$_handle-nested : false
) {
	$position : _sugar-parse-properties($position, (
		position : fixed relative absolute,
		vertical-align : top middle bottom,
		align : left center right,
		top : number,
		right : number,
		bottom : number,
		left : number,
		z : number
	), (
		position : p,
		top : t y,
		right : r,
		bottom : b,
		left : l x
	));

	$return : ();

	// handle nested
	@if $_handle-nested {
		$position : _sugar-handle-nested(position, $position);
	}

	// get values
	$pos : map-get-or($position, position, absolute);
	$top : map-get($position, top);
	$right : map-get($position, right);
	$bottom : map-get($position, bottom);
	$left : map-get($position, left);
	$z : map-get($position, z);
	$vertical-align : map-get($position, vertical-align);
	$align : map-get($position, align);

	@if $pos {
		$return : map-set($return, position, $pos);
	}
	@if $z {
		$return : map-set($return, transform, translateZ($z));
	}
	@if $vertical-align or $align {
		// top
		@if $vertical-align == top {
			$return : map-set($return, top, 0%);
			@if $align == left {
				$return : map-set($return, left, 0%);
			} @else if $align == center {
				$return : map-set($return, left, 50%);
				$return : map-merge($return, s-translate(-50% 0%));
			} @else if $align == right {
				$return : map-set($return, right, 0%);
			} @else {
				$return : map-set($return, left, 0%);
			}
		} @else if $vertical-align == middle {
			$return : map-set($return, top, 50%);
			@if $align == left {
				$return : map-set($return, left, 0%);
				$return : map-merge($return, s-translate(0 -50%));
			} @else if $align == center {
				$return : map-set($return, left, 50%);
				$return : map-merge($return, s-translate(-50% -50%));
			} @else if $align == right {
				$return : map-set($return, right, 0%);
				$return : map-merge($return, s-translate(0 -50%));
			} @else {
				$return : map-merge($return, s-translate(-50% 0%));
			}
		} @else if $vertical-align == bottom {
			$return : map-set($return, bottom, 0%);
			@if $align == left {
				$return : map-set($return, left, 0%);
			} @else if $align == center {
				$return : map-set($return, left, 50%);
				$return : map-merge($return, s-translate(-50% 0%));
			} @else if $align == right {
				$return : map-set($return, right, 0%);
			} @else {
				$return : map-set($return, left, 0%);
			}
		} @else if $align == left {
			$return : map-set($return, left, 0%);
			@if $vertical-align == top {
				$return : map-set($return, top, 0%);
			} @else if $vertical-align == middle {
				$return : map-set($return, top, 50%);
				$return : map-merge($return, s-translate(0 -50%));
			} @else if $vertical-align == bottom {
				$return : map-set($return, bottom, 0%);
			} @else {
				$return : map-set($return, top, 0%);
			}
		} @else if $align == center {
			$return : map-set($return, left, 50%);
			@if $vertical-align == top {
				$return : map-set($return, top, 0%);
				$return : map-merge($return, s-translate(-50% 0%));
			} @else if $vertical-align == middle {
				$return : map-set($return, top, 50%);
				$return : map-merge($return, s-translate(-50% -50%));
			} @else if $vertical-align == bottom {
				$return : map-set($return, bottom, 0%);
				$return : map-merge($return, s-translate(-50% 0%));
			} @else {
				$return : map-set($return, top, 0%);
			}
		} @else if $align == right {
			$return : map-set($return, right, 0%);
			@if $vertical-align == top {
				$return : map-set($return, top, 0%);
			} @else if $vertical-align == middle {
				$return : map-set($return, top, 50%);
				$return : map-merge($return, s-translate(0 -50%));
			} @else if $vertical-align == bottom {
				$return : map-set($return, bottom, 0%);
			} @else {
				$return : map-set($return, top, 0%);
			}
		}
	}
	@if $top {
		$return : map-set($return, top, $top);
	}
	@if $right {
		$return : map-set($return, right, $right);
	}
	@if $bottom {
		$return : map-set($return, bottom, $bottom);
	}
	@if $left {
		$return : map-set($return, left, $left);
	}

	// return map
	@return $return;
}

//
// Vertical aligner
//
@mixin s-vertical-aligner(
) {
	&:before {
		content: '';
		display: inline-block;
		vertical-align: middle;
		height: 100%; width: .1px;
	}

	> * {
		display: inline-block;
		vertical-align: middle;
	}
}

//
// Translate
//
@mixin s-translate(
	$translate
) {
	// get the translate props
	$translate : s-translate($translate, $_handle-nested : true);

	// get map
	@each $prop, $value in $translate {
		#{$prop} : $value;
	}

	// handle nested
	@include _sugar-handle-nested(translate) {
		@content;
	}
}
@function s-translate(
	$translate,
	$_handle-nested : false
) {
	$translate : _sugar-parse-properties($translate, (
		x : number,
		y : number,
		z : number
	));
	
	// handle nested
	@if $_handle-nested {
		$translate : _sugar-handle-nested(translate, $translate);
	}

	// get values
	$x : map-get-or($translate, x, 0);
	$y : map-get-or($translate, y, 0);
	$z : map-get-or($translate, z, 0);

	// build translate
	$translates : ();
	@if $x {
		$translates : append($translates, translateX($x));
	}
	@if $y {
		$translates : append($translates, translateY($y));
	}
	@if $z {
		$translates : append($translates, translateZ($z));
	}

	// return translate
	@return (
		transform : $translates
	);
}

//
// Transform
//
@mixin s-transform(
	$transform
) {
	// get the translate props
	$transform : s-transform($transform, $_handle-nested : true);

	// get map
	@each $prop, $value in $transform {
		#{$prop} : $value;
	}

	// handle nested transforms
	@include _sugar-handle-nested(transform) {
		@content;
	}
}
@function s-transform(
	$transform,
	$_handle-nested : false
) {
	// parse properties
	$transform : _sugar-parse-properties($transform, null);

	// handle nested transforms
	@if $_handle-nested {
		$transform : _sugar-handle-nested(transform, $transform);
	}

	// build transform
	$transforms : ();
	@each $name, $value in $transform {
		$values : ();
		@each $val in $value {
			$values : append($values, $val, comma);
		}
		$transforms : append($transforms, unquote("#{$name}(#{$values})"));
	}
	// return
	@return (
		transform : $transforms
	);
}

//
// Ratio
//
@mixin s-ratio(
	$ratio
) {
	$ratio : _sugar-parse-properties($ratio, (
		type : before after,
		ratio : number
	), (
		type : t,
		ratio : r
	));
	$rat : map-get($ratio, ratio);
	$type : map-get-or($ratio, type, before);
	position: relative;
	overflow: hidden;
	&:#{$type} {
		content:'';
		display: block;
		height: 0;
		padding-top: percentage(1 / $rat);
	}
}

//
// Fit
// Make an element 100% width and height
//
@mixin _s-fit() {
	width: 100%;
	height: 100%;
}
%s-fit { @include _s-fit(); }
@mixin s-fit() { @include _s-fit(); }

//
// Size
//
@mixin s-size(
	$size
) {
	$size : _sugar-parse-properties($size, (
		position : absolute relative,
		size : cover contain,
		width : number,
		height : number
	), (
		position : p,
		size : s
	));

	// handle nested
	$size : _sugar-handle-nested(size, $size);

	// get values
	$width : map-get($size, width);
	$height : map-get($size, height);
	$s : map-get($size, size);
	$p : map-get-or($size, position, absolute);

	// apply values
	@if $s {
		position: $p;
		top: 50%;
		left: 50%;
		transform: translateX(-50%) translateY(-50%);
		@if $s == cover {
			min-width: 100%;
			min-height: 100%;
		} @else if $s == contain {
			max-width:100%;
			max-height:100%;
		}
	} @else {
		@if $width {
			width : $width;
		}
		@if $height {
			height : $height;
		}
	}

	// handle nested
	@include _sugar-handle-nested(size) {
		@content;
	}
}

//
// Selection
//
@mixin s-selection {
	::-moz-selection { @content; }
	::selection { @content; }
}

//
// Visually hidden
//
@mixin _s-visually-hidden {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute;
}
%s-visually-hidden {
	@include _s-visually-hidden();
}
@mixin s-visually-hidden() {
	@include _s-visually-hidden();
}