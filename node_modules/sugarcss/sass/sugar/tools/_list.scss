//
// Remove item from list
//
@function remove-nth($list, $index) {
  $result: null;
		
  @if type-of($index) != number {
	@warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }

  @else if $index == 0 {
	@warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }

  @else if abs($index) > length($list) {
	@warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }

  @else {
	$result: ();
	$index: if($index < 0, length($list) + $index + 1, $index);  

	@for $i from 1 through length($list) {
	  @if $i != $index {
		$result: append($result, nth($list, $i));
	  }
	}
  }
		
  @return $result;
}

//
// Last nth
//
@function last-nth($list) {
	@return nth($list,length($list));
}

//
// First nth
//
@function first-nth($list) {
	@return nth($list,1);
}

//
// Search in a list a one value exist
//
@function in-list(
	$list,
	$values
) {
	@each $val in $values {
		@if index($list, $val) {
			@return true;
		}
	}
	@return false;
}

//
// Implode
//
@function list-implode($list, $glue : '') {
	$res : ();
	$idx : 1;
	@each $l in $list {
		$res : append($res, $l);
		@if $idx < length($list) {
			$res : append($res, $glue);
		}
		$idx : $idx + 1;
	}
	@return _join($res,'');
}

//
// Prepend
//
@function list-prepend($list, $value) {
	@return join($value, $list);
}

//
// List shift
//
// @param 	List 	$list 		The list to use
// @return 	List 				The processed list
//
@function list-shift($list) {
	@return remove-nth($list,1);
}

//
// List pop
//
// @param 	List 	$list 		The list to use
// @return 	List 				The processed list
//
@function list-pop($list) {
	@return remove-nth($list,length($list));
}